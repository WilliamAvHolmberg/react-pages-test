{"version":3,"sources":["components/hero/hero.js","pages/start-page/start-page.js","utils/history.js","routes.js","serviceWorker.js","index.js"],"names":["Hero","useState","siteLoaded","setLoaded","useEffect","className","autoPlay","muted","playsInline","loop","src","type","alt","StartPage","createBrowserHistory","Routes","history","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0jBA+CeA,MA1Cf,WAAkB,IAAD,EACiBC,oBAAS,GAD1B,mBACRC,EADQ,KACIC,EADJ,KAQf,OAJAC,qBAAU,WACRD,GAAU,KACT,IAGD,yBAAKE,UAAU,gBACb,2BACEC,UAAQ,EACRC,OAAK,EACLC,YAAY,cACZC,MAAI,EACJJ,UAAU,SAEV,4BAAQK,IAAI,mBAAmBC,KAAK,eAEtC,yBAAKN,UAAU,qBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,QAAO,yBAAKK,IAAI,sBAAsBE,IAAI,6DACxD,yBAAKP,UAAW,YAAcH,EAAa,OAAS,YACpD,yBAAKG,UAAW,WAAaH,EAAa,QAAU,YAClD,4BArBI,uB,qECgBDW,MAdf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,Q,QCXSS,gB,QCmBAC,E,iLAXP,OACI,6BACI,kBAAC,IAAD,CAAQC,QAASA,GACb,kBAAC,IAAD,CAAOC,KAAK,GAAGC,UAAWL,U,GALzBM,aCIDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5d6d6dd3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './hero.scss'\nimport TextLoop from '../text-loop/text-loop'\nimport ReadMoreButton from '../read-more-button/read-more-button'\n\nfunction Hero () {\n  const [siteLoaded, setLoaded] = useState(false)\n  //const [array] = useState(['The first ever King of Pong', 'Music, Food & Drinks', '23 October, 2019'])\n  const title = '15 April, 2020'\n  useEffect(() => {\n    setLoaded(true)\n  }, [])\n\n  return (\n    <div className='section hero'>\n      <video\n        autoPlay\n        muted\n        playsInline=\"playsinline\"\n        loop\n        className=\"video\"\n      >\n        <source src=\"/videos/test.mp4\" type=\"video/mp4\" />\n      </video>\n      <div className='content-container'>\n        <div className='main'>\n          <h1 className='logo'><img src='/img/logo-white.png' alt='King Of Pong - Mini Table Championship for the IT crowd' /></h1>\n          <div className={'divider ' + (siteLoaded ? 'show' : 'hidden')} />\n          <div className={'roller ' + (siteLoaded ? 'show ' : 'hidden ')}>\n            <h1>{title}</h1>\n            {/*<TextLoop array={array} interval={3500} />\n            <div onClick={() => {\n              var elmnt = document.getElementById('sign-up')\n              elmnt.scrollIntoView({\n                behavior: 'smooth'\n              })\n            }}className='show-interest-button button'>\n              <p style={{ lineHeight: '60px' }}>Sign up Now</p>\n          </div>*/}\n          </div>\n        </div>\n      </div>\n      {/*<ReadMoreButton targetElement={'social'} />*/}\n    </div>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport './start-page.scss'\nimport Hero from '../../components/hero/hero'\nimport TournamentSection from '../../components/tournament-section/tournament-section'\nimport SocialSection from '../../components/social-section/social-section'\nimport WhenWhereSection from '../../components/when-where-section/when-where-section'\nimport FaqSection from '../../components/faq-section/faq-section'\nimport SignUpForm from '../../components/sign-up-section/sign-up-section'\nimport Footer from 'components/footer/footer'\n\nfunction StartPage () {\n  return (\n    <div className='App'>\n      <Hero />\n      {/* <SocialSection />\n      <WhenWhereSection />\n      <TournamentSection />\n      <FaqSection />\n      <SignUpForm />\n      <Footer />*/}\n    </div>\n  )\n}\n\nexport default StartPage\n","import {createBrowserHistory} from 'history'\n\nexport default createBrowserHistory()","import React, {Component} from 'react'\n\nimport StartPage from './pages/start-page/start-page'\n\nimport history from './utils/history'\n\nimport { Router, Route } from 'react-router'\n\nclass Routes extends Component {\n    render() {\n        return (\n            <div>\n                <Router history={history}>\n                    <Route path='' component={StartPage}/>\n                </Router>\n            </div>\n        )\n    }\n}\n\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}